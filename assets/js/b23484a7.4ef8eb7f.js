"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[658],{2631:e=>{e.exports=JSON.parse('{"permalink":"/test-github-pages/blog/2025/04/14/rentcrl-domain-driven-design-minimal-api","source":"@site/blog/2025-04-14-rentcrl-domain-driven-design-minimal-api.md","title":"rentcrl-domain-driven-design-minimal-api","description":"Suite du d\xe9veloppement de RentCRL : l\u2019application qui permet aux propri\xe9taires d\u2019envoyer automatiquement les quittances de loyer \xe0 leurs locataires. Apr\xe8s avoir travaill\xe9 sur le frontend en React et l\u2019int\xe9gration d\u2019Auth0 pour l\u2019authentification, je me suis attaqu\xe9 au backend. Je vous partage ici mes choix techniques et leur motivation.","date":"2025-04-14T00:00:00.000Z","tags":[],"readingTime":3.79,"hasTruncateMarker":true,"authors":[{"name":"Micka\xebl C\xe9raline","title":"D\xe9veloppeur Full Stack","url":"https://github.com/mickaelcrl","key":"mickael","page":null}],"frontMatter":{"title":"rentcrl-domain-driven-design-minimal-api","authors":"mickael","date":"2025-04-14T00:00:00.000Z"},"unlisted":false,"prevItem":{"title":"D\xe9ployer une application React + ASP.NET Core + Cosmos DB sur Azure : gestion des environnements et des secrets","permalink":"/test-github-pages/blog/2025/05/16/deployer-une-application-react-asp-net-core-cosmosdb-azure"},"nextItem":{"title":"Architecture de RentCRL","permalink":"/test-github-pages/blog/2024/03/07/architecture-rentcrl"}}')},3359:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>d,frontMatter:()=>s,metadata:()=>i,toc:()=>u});var i=t(2631),r=t(4848),a=t(8453);const s={title:"rentcrl-domain-driven-design-minimal-api",authors:"mickael",date:new Date("2025-04-14T00:00:00.000Z")},l="RentCRL \u2013 entre Domain Driven Design et minimal API",o={authorsImageUrls:[void 0]},u=[{value:"Pourquoi Clean Architecture et Domain Driven Design ?",id:"pourquoi-clean-architecture-et-domain-driven-design-",level:3},{value:"Pourquoi j\u2019ai utilis\xe9 Minimal API ?",id:"pourquoi-jai-utilis\xe9-minimal-api-",level:3},{value:"Pourquoi j&#39;utilise Result&lt;T&gt; au lieu d\u2019Exceptions ?",id:"pourquoi-jutilise-resultt-au-lieu-dexceptions-",level:3},{value:"Et FluentValidation dans tout \xe7a ?",id:"et-fluentvalidation-dans-tout-\xe7a-",level:3},{value:"Le r\xe9sultat ?",id:"le-r\xe9sultat-",level:3}];function c(e){const n={a:"a",code:"code",h3:"h3",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:"Suite du d\xe9veloppement de RentCRL : l\u2019application qui permet aux propri\xe9taires d\u2019envoyer automatiquement les quittances de loyer \xe0 leurs locataires. Apr\xe8s avoir travaill\xe9 sur le frontend en React et l\u2019int\xe9gration d\u2019Auth0 pour l\u2019authentification, je me suis attaqu\xe9 au backend. Je vous partage ici mes choix techniques et leur motivation."}),"\n",(0,r.jsx)(n.p,{children:"Pour faire simple, nous parlerons de clean architecture, DDD, minimal API, du pattern Result et de FluentValidation."}),"\n",(0,r.jsx)(n.h3,{id:"pourquoi-clean-architecture-et-domain-driven-design-",children:"Pourquoi Clean Architecture et Domain Driven Design ?"}),"\n",(0,r.jsxs)(n.p,{children:["J\u2019ai choisi de structurer mon backend en suivant les principes de la ",(0,r.jsx)(n.strong,{children:"Clean Architecture"})," et du ",(0,r.jsx)(n.strong,{children:"Domain Driven Design"})," car ceux-ci sont populaires dans l\u2019industrie et j\u2019avais tout simplement envie de me les approprier et de les d\xe9couvrir."]}),"\n",(0,r.jsx)(n.p,{children:"Ce n\u2019est pas forc\xe9ment simple au d\xe9but, mais \xe7a force \xe0 bien s\xe9parer les responsabilit\xe9s :"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"le domaine contient la logique m\xe9tier"}),"\n",(0,r.jsx)(n.li,{children:"l\u2019application s\u2019occupe de l\u2019orchestration"}),"\n",(0,r.jsx)(n.li,{children:"l\u2019infrastructure g\xe8re l\u2019acc\xe8s aux donn\xe9es"}),"\n",(0,r.jsx)(n.li,{children:"la pr\xe9sentation re\xe7oit les requ\xeates"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Voici l\u2019arborescence de la solution :"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"image.png",src:t(4267).A+"",width:"413",height:"845"})}),"\n",(0,r.jsx)(n.h3,{id:"pourquoi-jai-utilis\xe9-minimal-api-",children:"Pourquoi j\u2019ai utilis\xe9 Minimal API ?"}),"\n",(0,r.jsx)(n.p,{children:"Alors j\u2019ai choisi d\u2019utiliser Minimal API car pendant longtemps il fallait utiliser des contr\xf4leurs mais depuis environ 2 ans .Net a sorti minimal API donc je me suis int\xe9ress\xe9 a ce que c\u2019est."}),"\n",(0,r.jsx)(n.p,{children:"De plus, je suis tomb\xe9 sur une vid\xe9o de Nick Chapsas qui compare minimal API avec MVC \xe0 travers une discussion sur le sujet et ce que j\u2019en retiens est que minimal API est plus rapide, plus moderne avec moins de boilerplate et donc \xe7a m\u2019a encourag\xe9 dans mon envie de partir dessus."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"https://www.youtube.com/watch?v=bpVN_plQm5E",children:"https://www.youtube.com/watch?v=bpVN_plQm5E"})}),"\n",(0,r.jsx)(n.h3,{id:"pourquoi-jutilise-resultt-au-lieu-dexceptions-",children:"Pourquoi j'utilise Result<T> au lieu d\u2019Exceptions ?"}),"\n",(0,r.jsx)(n.p,{children:"J\u2019ai r\xe9cemment regard\xe9 la vid\xe9o de Milan Jovanovic qui introduit le pattern Result :"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"https://www.youtube.com/watch?v=WCCkEe_Hy2Y&t=612s",children:"https://www.youtube.com/watch?v=WCCkEe_Hy2Y&t=612s"})}),"\n",(0,r.jsx)(n.p,{children:"Il explique que les exceptions peuvent \xeatre co\xfbteuses en performance. Alors, il propose un pattern int\xe9ressant pour g\xe9rer les erreurs \u201cattendues\u201d comme par exemple les erreurs de validation."}),"\n",(0,r.jsx)(n.p,{children:"Et ainsi, on envoie des exceptions que pour les erreurs qui th\xe9oriquement ne devraient jamais arriver comment par exemple au moment de la cr\xe9ation d\u2019un Owner avec un param\xe8tre non valide.\nErreur attendue :"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"\npublic async Task<Result<Owner>> CreateOwnerAsync(string auth0Id, string firstName, string lastName, string email, string phoneNumber)\n{\n    var response = _ownerRepository.GetByEmailAsync(email);\n    if (response.Result != null)\n        return Result.Failure<Owner>(UserErrors.EmailAlreadyExists);\n\n    var newOwner = new Owner(auth0Id, firstName, lastName, email, phoneNumber);\n    return await _ownerRepository.AddAsync(newOwner);\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"Erreur qui ne devrait pas se produire car on est d\xe9j\xe0 pass\xe9 par toutes les couches pr\xe9c\xe9dentes (y compris la validation avec FluentValidation) :"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:'public Owner(string auth0Id, string firstName, string lastName, string email, string phoneNumber)\n{\n    if (string.IsNullOrEmpty(auth0Id))\n        throw new ArgumentException("Auth0Id cannot be null.", nameof(auth0Id));\n\n    if (string.IsNullOrEmpty(firstName))\n        throw new ArgumentException("Firstname cannot be null.", nameof(firstName));\n\n    if (string.IsNullOrEmpty(lastName))\n        throw new ArgumentException("LastName cannot be null.", nameof(lastName));\n\n    if (!Regexes.Email.IsMatch(email))\n        throw new ArgumentException("Email is not valid.", nameof(email));\n\n    if (!Regexes.PhoneNumber.IsMatch(phoneNumber))\n        throw new ArgumentException("PhoneNumber is not valid.", nameof(phoneNumber));\n\n    Id = Guid.NewGuid();\n    Auth0Id = auth0Id;\n    FirstName = firstName;\n    LastName = lastName;\n    Email = email;\n    PhoneNumber = phoneNumber;\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"et-fluentvalidation-dans-tout-\xe7a-",children:"Et FluentValidation dans tout \xe7a ?"}),"\n",(0,r.jsxs)(n.p,{children:["Je valide les entr\xe9es utilisateur d\xe8s la couche d\u2019exposition, avec ",(0,r.jsx)(n.strong,{children:"FluentValidation"}),". C\u2019est simple \xe0 brancher, puissant, et me permet de retourner des erreurs claires c\xf4t\xe9 frontend sans m\xealer la validation \xe0 la logique m\xe9tier. La couche domaine reste concentr\xe9e sur les r\xe8gles m\xe9tier, pendant que la validation des entr\xe9es est g\xe9r\xe9e directement dans la couche de pr\xe9sentation. \xc7a m'\xe9vite d\u2019avoir des if/else ou des exceptions partout, et je peux centraliser les r\xe8gles de validation dans des classes d\xe9di\xe9es."]}),"\n",(0,r.jsx)(n.p,{children:"J\u2019ai d\xe9couvert FluentValidation gr\xe2ce \xe0 mon fr\xe8re, mais aussi via cette vid\xe9o de Milan Jovanovic qui en fait une bonne d\xe9mo :"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"https://www.youtube.com/watch?v=vaDDB7BpEgQ",children:"https://www.youtube.com/watch?v=vaDDB7BpEgQ"})}),"\n",(0,r.jsx)(n.p,{children:"C\u2019est ce qui m\u2019a convaincu de l\u2019adopter ici."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"public class OwnerModelValidator : AbstractValidator<OwnerModel>\n{\n    public OwnerModelValidator()\n    {\n        RuleFor(o => o.Auth0Id).NotEmpty();\n        RuleFor(o => o.FirstName).NotEmpty();\n        RuleFor(o => o.LastName).NotEmpty();\n        RuleFor(o => o.Email).NotEmpty().Matches(Regexes.Email);\n        RuleFor(o => o.PhoneNumber).NotEmpty().Matches(Regexes.PhoneNumber);\n    }\n}\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:'public static class OwnerEndpoint\n{\n    public const string PostOwnerRoute = "/owners";\n\n    public static void MapOwnerEndpoint(this IEndpointRouteBuilder app)\n    {\n        app.MapPost(PostOwnerRoute, CreateOwner)\n        .RequireAuthorization()\n        .WithName("Owners");\n    }\n\n    internal static async Task<IResult> CreateOwner([FromBody] OwnerModel ownerModel, IOwnerService ownerService, IValidator<OwnerModel> validator)\n    {\n        var validationResult = validator.Validate(ownerModel);\n        if (!validationResult.IsValid)\n            return Results.ValidationProblem(validationResult.ToDictionary());\n\n        var result = await ownerService.CreateOwnerAsync(\n            ownerModel.Auth0Id,\n            ownerModel.FirstName,\n            ownerModel.LastName,\n            ownerModel.Email,\n            ownerModel.PhoneNumber\n        );\n\n        if (result.IsSuccess)\n        {\n            var newOwner = result.Value.ToModel();\n            return Results.Ok(newOwner);\n        }\n\n        if (result.Error == UserErrors.EmailAlreadyExists)\n            return Results.Conflict();\n\n        return Results.Problem(statusCode: StatusCodes.Status500InternalServerError);\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"le-r\xe9sultat-",children:"Le r\xe9sultat ?"}),"\n",(0,r.jsx)(n.p,{children:"Au final, je pense avoir un backend propre. C\u2019est-\xe0-dire testable et facile \xe0 maintenir pour ajouter les autres fonctionnalit\xe9s par la suite et pr\xeat \xe0 \xeatre d\xe9ploy\xe9 sur Azure. En tout cas, cela reste mon point de vue de d\xe9veloppeur avec 2 ans d\u2019exp\xe9rience."}),"\n",(0,r.jsxs)(n.p,{children:["\ud83d\udcc1 Code source ici : ",(0,r.jsx)(n.a,{href:"https://github.com/MickaelCRL/RentCRL",children:"github.com/MickaelCRL/RentCRL"})]})]})}function d(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},4267:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/image-82e46fda42ac8490b00118d7c8a7a438.png"},8453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>l});var i=t(6540);const r={},a=i.createContext(r);function s(e){const n=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),i.createElement(a.Provider,{value:n},e.children)}}}]);