"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[130],{7735:e=>{e.exports=JSON.parse('{"archive":{"blogPosts":[{"id":"/2025/05/16/deployer-une-application-react-asp-net-core-cosmosdb-azure","metadata":{"permalink":"/blog/2025/05/16/deployer-une-application-react-asp-net-core-cosmosdb-azure","source":"@site/blog/2025-05-16-deployer-une-application-react-asp-net-core-cosmosdb-azure.md","title":"D\xe9ployer une application React + ASP.NET Core + Cosmos DB sur Azure : gestion des environnements et des secrets","description":"Dans cet article, je partage mon exp\xe9rience de d\xe9ploiement de RentCRL sur Azure. Cette application comprend :","date":"2025-05-16T00:00:00.000Z","tags":[],"readingTime":7.56,"hasTruncateMarker":true,"authors":[{"name":"Micka\xebl C\xe9raline","title":"D\xe9veloppeur Full Stack","url":"https://github.com/mickaelcrl","key":"mickael","page":null}],"frontMatter":{"title":"D\xe9ployer une application React + ASP.NET Core + Cosmos DB sur Azure : gestion des environnements et des secrets","authors":"mickael","date":"2025-05-16T00:00:00.000Z"},"unlisted":false,"nextItem":{"title":"rentcrl-domain-driven-design-minimal-api","permalink":"/blog/2025/04/14/rentcrl-domain-driven-design-minimal-api"}},"content":"Dans cet article, je partage mon exp\xe9rience de d\xe9ploiement de RentCRL sur Azure. Cette application comprend :\\n\\n- une application React\\n\\n- une API REST construite avec ASP.NET Core\\n\\n- une base de donn\xe9es Azure Cosmos DB\\n\\nMon objectif principal est de montrer comment je suis pass\xe9 de l\u2019environnement local \\"Development\\" \xe0 l\u2019environnement \\"Staging\\" et de rendre RentCRL accessible \xe0 tout le monde..\\n\\n\x3c!-- truncate --\x3e\\n\\n## 1. D\xe9veloppement en local\\n\\n### 1.1. Communication avec l\u2019API\\n\\nEn local, il est facile de connecter le tout. Le frontend appelle l\u2019API via un `fetch` avec le token d\'Auth0 sur le bon endpoint. Dans mon cas, l\u2019API permet juste de cr\xe9er un owner, alors je me rends sur `apiBaseUrl/owners`, o\xf9 `apiBaseUrl` \xe9quivaut \xe0 `http://localhost:5047` pour le moment. Au d\xe9part, j\u2019enregistre la variable dans un fichier `.env`, ce qui donne :\\n\\n```tsx\\nconst token = await getAccessTokenSilently();\\nawait fetch(`${import.meta.env.VITE_API_BASE_URL}/owners`, {\\n  method: \\"POST\\",\\n  headers: {\\n    \\"Content-Type\\": \\"application/json\\",\\n    Authorization: `Bearer ${token}`,\\n  },\\n  body: JSON.stringify({ ...owner }),\\n});\\n```\\n\\n### 1.2. Communication entre l\u2019application et la base de donn\xe9es\\n\\nEnsuite, l\u2019API r\xe9cup\xe8re les informations puis cr\xe9e le owner dans la base de donn\xe9es.\\n\\nCependant, l\u2019API a besoin d\u2019accepter les politiques de CORS provenant de l\u2019application et de se connecter \xe0 la base de donn\xe9es pour effectuer les actions. Je configure cela dans le fichier `Program.cs`.\\n\\nVoici le code pour accepter les politiques de CORS :\\n\\n```csharp\\nbuilder.Services.AddCors(options =>\\n{\\n    options.AddPolicy(name: MyAllowSpecificOrigins,\\n                      policy =>\\n                      {\\n                          policy.WithOrigins(builder.Configuration[\\"AppBaseUrl\\"])\\n                          .AllowAnyHeader()\\n                          .AllowAnyMethod()\\n                          .AllowCredentials();\\n                      });\\n});\\n```\\n\\nEt voici le code pour se connecter \xe0 la base de donn\xe9es :\\n\\n```csharp\\n public static void AddDatabaseConnection(WebApplicationBuilder builder, IServiceCollection services)\\n {\\n     var endpoint = builder.Configuration[\\"CosmosDB:EndpointUri\\"];\\n     var primaryKey = builder.Configuration[\\"CosmosDB:PrimaryKey\\"];\\n     var database = builder.Configuration[\\"CosmosDB:DatabaseName\\"];\\n     services.AddSingleton(new CosmosDbService(endpoint, primaryKey, database));\\n }\\n```\\n\\nL\u2019API a besoin de param\xe8tres de configuration : le base URL de l\u2019application, l\u2019endpoint de la base de donn\xe9es, la cl\xe9 primaire et le nom de la base de donn\xe9es.\\n\\nDans le fichier `appsettings.json`, je peux ajouter le base URL de l\u2019application.\\n\\nPour la base de donn\xe9es, en lan\xe7ant l\u2019\xe9mulateur de Cosmos DB, je peux r\xe9cup\xe9rer les informations n\xe9cessaires et les mettre directement dans le fichier `appsettings.json` :\\n\\n```csharp\\n{\\n  \\"CosmosDB\\": {\\n    \\"EndpointUri\\": \\"https://localhost:8081\\",\\n    \\"PrimaryKey\\": \\"C2y6yDjf5/R+ob0N8A7Cgv30VRDJIWEHLM+4QDU5DE2nQ9nDuVTqobD4b8mGGyPMbIZnqyMsEcaGQy67XIw/Jw==\\",\\n    \\"DatabaseName\\": \\"RentCRLDatabase\\"\\n  },\\n\\n  \\"AppBaseUrl\\": \\"http://localhost:5173\\"\\n}\\n```\\n\\nC\u2019est bon, tout est maintenant connect\xe9 : l\u2019application peut envoyer une requ\xeate \xe0 l\u2019API pour cr\xe9er un owner, l\u2019API peut l\u2019accepter puis se connecter \xe0 la base de donn\xe9es et cr\xe9er le owner.\\n\\nMaintenant, comment faire pour que la configuration fonctionne \xe9galement dans le monde r\xe9el et comment le faire proprement ?\\n\\nVoyons comment j\u2019ai proc\xe9d\xe9.\\n\\nEn local, l\u2019environnement est celui de \\"Development\\" : tout tourne sur ma machine. Or, je veux aller en production ou, du moins pour le moment, en \\"Staging\\" (pr\xe9-prod). C\u2019est-\xe0-dire que je veux rendre l\u2019application accessible \xe0 tous, et pour cela, j\u2019ai choisi d\u2019utiliser une solution serverless propos\xe9e par Azure : les Container Apps. Ainsi, les trois entit\xe9s (application, API et Cosmos DB) ne tourneront plus sur ma machine, donc l\u2019environnement change, tout comme les variables de configuration que j\u2019ai mentionn\xe9es plus t\xf4t. Voici comment j\u2019ai adapt\xe9 mes variables en fonction de l\u2019environnement.\\n\\n## 2. Pr\xe9paration d\u2019Azure\\n\\nD\u2019abord, je me suis rendu sur Azure et j\u2019ai cr\xe9\xe9 une base de donn\xe9es Cosmos DB : [https://learn.microsoft.com/en-us/azure/cosmos-db/nosql/quickstart-portal](https://learn.microsoft.com/en-us/azure/cosmos-db/nosql/quickstart-portal)\\n\\nEnsuite, j\u2019ai cr\xe9\xe9 deux Container Apps : un pour faire tourner l\u2019image de mon API et l\u2019autre pour faire tourner l\u2019image de mon application : [https://learn.microsoft.com/en-us/azure/container-apps/quickstart-portal](https://learn.microsoft.com/en-us/azure/container-apps/quickstart-portal)\\n\\nPuis, j\u2019ai cr\xe9\xe9 un Container Registry pour pousser les images de mon application et de mon API, qui seront r\xe9cup\xe9r\xe9es par les Container Apps : [https://learn.microsoft.com/en-us/azure/container-registry/container-registry-get-started-portal?tabs=azure-cli](https://learn.microsoft.com/en-us/azure/container-registry/container-registry-get-started-portal?tabs=azure-cli)\\n\\n## 3. D\xe9ploiement de l\u2019API sur Azure\\n\\nASP.NET g\xe8re les variables d\u2019environnement automatiquement lors du lancement de l\u2019application. Comme je l\u2019ai montr\xe9 plus t\xf4t, gr\xe2ce au fichier `appsettings.json`, je peux acc\xe9der aux variables de configuration. Maintenant, il suffit de s\xe9parer les variables qui changent en fonction de l\u2019environnement dans les `appsettings` correspondants.\\n\\nJe peux donc cr\xe9er les fichiers `appsettings.Development.json` et `appsettings.Staging.json`.\\n\\n![image.png](../static/img//deploiement-azure/image.png)\\n\\nJe d\xe9place alors le code dans `appsettings.Development.json` :\\n\\n```csharp\\n \\"CosmosDB\\": {\\n   \\"EndpointUri\\": \\"https://localhost:8081\\",\\n   \\"PrimaryKey\\": \\"C2y6yDjf5/R+ob0N8A7Cgv30VRDJIWEHLM+4QDU5DE2nQ9nDuVTqobD4b8mGGyPMbIZnqyMsEcaGQy67XIw/Jw==\\",\\n   \\"DatabaseName\\": \\"RentCRLDatabase\\"\\n },\\n\\n \\"AppBaseUrl\\": \\"http://localhost:5173\\"\\n```\\n\\nPuis, dans `appsettings.Staging.json`, j\u2019ajoute :\\n\\n```csharp\\n{\\n  \\"CosmosDB\\": {\\n    \\"EndpointUri\\": \\"le endpoint uri de ta bd\\",\\n    \\"DatabaseName\\": \\"RentCRLDatabase\\"\\n  },\\n\\n  \\"AppBaseUrl\\": \\"le base url du container app qui tourne sur l\'image de ton app (frontend)\\"\\n}\\n```\\n\\nDans le `appsettings.Staging.json`, je ne mets pas la cl\xe9 primaire car elle est secr\xe8te. J\u2019utilise le Key Vault d\u2019Azure qui me permet de g\xe9rer mes secrets, car ceux-ci ne doivent pas \xeatre expos\xe9s : [https://learn.microsoft.com/en-us/azure/container-apps/manage-secrets?tabs=azure-portal](https://learn.microsoft.com/en-us/azure/container-apps/manage-secrets?tabs=azure-portal)\\n\\nMaintenant, gr\xe2ce \xe0 la variable `ASPNETCORE_ENVIRONMENT`, si la valeur est \\"Development\\", alors `builder.Configuration` ira lire dans le fichier `appsettings.json` puis `appsettings.Development.json`, et si la valeur est \\"Staging\\", alors il ira lire dans le `appsettings.json` puis `appsettings.Staging.json`.\\n\\nApr\xe8s avoir cr\xe9\xe9 le Dockerfile et build\xe9 l\u2019image de l\u2019API, au moment de lancer l\u2019image, je passe en param\xe8tre la valeur de la variable d\u2019environnement. Par d\xe9faut, dans une image Docker, c\u2019est \\"Production\\".\\n\\n```powershell\\ndocker run -p 8080:80 -e ASPNETCORE_ENVIRONMENT=Staging test\\n```\\n\\nJe v\xe9rifie que tout fonctionne sur ma machine. Si tout est ok, je pousse l\u2019image dans le Container Registry d\u2019Azure, puis je mets \xe0 jour l\u2019image du Container App de l\u2019API.\\n\\n```powershell\\naz containerapp update `\\n    --name $containerAppName `\\n    --resource-group $resourceGroupName `\\n    --image $imageName `\\n    --cpu 0.5 `\\n    --memory 1.0Gi `\\n    --min-replicas 1 `\\n    --max-replicas 2 `\\n    --set-env-vars `\\n    ASPNETCORE_ENVIRONMENT=Staging `\\n    CosmosDB__PrimaryKey=secretref:cosmosdb-primary-key\\n```\\n\\nSi tu as des erreurs de probes dans ton container app v\xe9rifie que ton api expose \u201c/\u201d comme endpoint.\\n\\n```csharp\\napp.MapGet(\\"/\\", () => Results.Ok(\\"OK\\"));\\n```\\n\\nEt que ton image \xe9coute le port 80. Dans le dockerfile : **ENV ASPNETCORE_HTTP_PORTS=80.**\\n\\nL\u2019api fonctionne dans l\u2019environnement de \u201cDevelopment\u201d mais \xe9galement en \u201cStaging\u201d. Disponible ici : [https://ca-rentcrl-api-stg-fc.politewater-4ee63bcd.francecentral.azurecontainerapps.io/scalar/v1#tag/rentcrlweb](https://ca-rentcrl-api-stg-fc.politewater-4ee63bcd.francecentral.azurecontainerapps.io/scalar/v1#tag/rentcrlweb)\\n\\n## 4. Deploiement de l\u2019app sur Azure\\n\\nPour l\u2019app, j\u2019utilise React, et contrairement \xe0 [ASP.NET](http://asp.net/), je n\u2019ai pas trouv\xe9 de gestion des variables d\u2019environnement aussi efficace dans React. C\u2019est pourquoi R\xe9mi C\xe9raline ([https://www.remiceraline.com](https://www.remiceraline.com/)) m\u2019a montr\xe9 une approche plut\xf4t int\xe9ressante que je vais partager ici.\\n\\nMon objectif est que les variables d\u2019environnement puissent changer de valeur **apr\xe8s** le build de l\u2019image, car je veux utiliser la **m\xeame image** dans l\u2019environnement de d\xe9veloppement, puis dans celui de staging pour les tests, et enfin en production. C\u2019est bien la m\xeame image qui passe par ces trois environnements. Pour le moment, la seule variable qui change selon l\u2019environnement est `apiBaseUrl`, et je veux pouvoir la modifier dans la commande `update`, comme pour l\u2019API, avec cette commande :\\n\\n```powershell\\naz containerapp update `\\n    --name $containerAppName `\\n    --resource-group $resourceGroupName `\\n    --image $imageName `\\n    --cpu 0.5 `\\n    --memory 1.0Gi `\\n    --min-replicas 1 `\\n    --max-replicas 2 `\\n    --set-env-vars `\\n    API_BASE_URL=https://ca-rentcrl-api-stg-fc.politewater-4ee63bcd.francecentral.azurecontainerapps.io\\n```\\n\\nMaintenant dans mon application React, dans le dossier **public**, j\u2019ai cr\xe9\xe9 un dossier **config** dans lequel je cr\xe9 un fichier env.js et env.template.js.\\n\\nDans mon application React, dans le dossier **public**, j\u2019ai cr\xe9\xe9 un dossier **config** dans lequel j\u2019ai mis deux fichiers : `env.js` et `env.template.js`.\\n\\n![image.png](../static/img/deploiement-azure/image1.png)\\n\\n### env.js\\n\\n```jsx\\nlet globalConfig = {\\n  apiBaseUrl: \\"http://localhost:5047\\",\\n};\\n```\\n\\n### env.template.js\\n\\n```jsx\\nlet globalConfig = {\\n  apiBaseUrl: \\"${API_BASE_URL}\\",\\n};\\n```\\n\\nJ\u2019ai ensuite d\xe9clar\xe9 cette variable pour l\u2019utiliser dans mon app React, qui fonctionne avec TypeScript. Dans le dossier **src**, j\u2019ai ajout\xe9 un fichier **global.d.ts** dans lequel j\u2019ai mis :\\n\\n```tsx\\ndeclare var globalConfig: {\\n  apiBaseUrl: string;\\n};\\n```\\n\\nJe remplace alors le code de tout \xe0 l\u2019heure par :\\n\\n```tsx\\nconst token = await getAccessTokenSilently();\\nawait fetch(`${globalConfig.apiBaseUrl}/owners`, {\\n  method: \\"POST\\",\\n  headers: {\\n    \\"Content-Type\\": \\"application/json\\",\\n    Authorization: `Bearer ${token}`,\\n  },\\n  body: JSON.stringify({ ...owner }),\\n});\\n```\\n\\n### \xc0 quoi \xe7a sert ?\\n\\nQuand je build mon image, React cr\xe9e un dossier **dist** qui contient le **bundler** avec tous les fichiers r\xe9unis dans un seul gros fichier.\\n\\n![image.png](../static/img/deploiement-azure/image2.png)\\n\\n\xc0 ce moment-l\xe0, il est trop tard pour changer la valeur des variables. Il aurait fallu avoir plusieurs fichiers de variables ou une logique conditionnelle pour choisir la bonne en fonction de l\u2019environnement. \xc0 d\xe9faut, le fichier **global.d.ts** permet \xe0 TypeScript de comprendre l\u2019objet `globalConfig` qui est d\xe9clar\xe9 dans le dossier **public** \u2014 donc **en dehors** du bundler \u2014 et qui se trouve dans le dossier **config** apr\xe8s le build.\\n\\nC\u2019est ce qui me permet de **r\xe9\xe9crire sa valeur dans le Dockerfile** avant de lancer l\u2019app gr\xe2ce \xe0 la commande `envsubst`.\\n\\nVoici la ligne qui permet de mettre \xe0 jour `env.template.js` :\\n\\n```powershell\\n  API_BASE_URL=https://ca-rentcrl-api-stg-fc.politewater-4ee63bcd.francecentral.azurecontainerapps.io\\n```\\n\\nPuis je remplace le contenu de `env.js` par celui de `env.template.js` avec la commande `envsubst` :\\n\\n```powershell\\nCMD [\\"/bin/sh\\", \\"-c\\", \\"envsubst < /usr/share/nginx/html/config/env.template.js > /usr/share/nginx/html/config/env.js && nginx -g \'daemon off;\'\\"]\\n```\\n\\nBien s\xfbr il ne faut pas oublier d\u2019importer la variable dans le **index.html** avant le **main.tsx**.\\n\\n```html\\n<body>\\n  <script type=\\"text/javascript\\" src=\\"/config/env.js\\"><\/script>\\n  <div id=\\"root\\"></div>\\n\\n  <script>\\n    console.log(globalConfig);\\n  <\/script>\\n\\n  <script type=\\"module\\" src=\\"/src/main.tsx\\"><\/script>\\n</body>\\n```\\n\\nAvec tout \xe7a, je peux mettre \xe0 jour le container app et sp\xe9cifier l\u2019environnement simplement.\\n\\n## Conclusion\\n\\nEn suivant cette approche, j\'ai pu :\\n\\n- **S\xe9parer les configurations** selon les environnements, ce qui facilite le d\xe9ploiement et la maintenance.\\n\\n- **S\xe9curiser les secrets** en utilisant Azure Key Vault.\\n\\n- **Automatiser le d\xe9ploiement** du frontend et du backend avec Azure Container Apps.\\n\\n\ud83d\udcc1 Code source ici : https://github.com/MickaelCRL/RentCRL\\n\\nN\'h\xe9sitez pas \xe0 me faire part de vos retours ou de vos questions !"},{"id":"/2025/04/14/rentcrl-domain-driven-design-minimal-api","metadata":{"permalink":"/blog/2025/04/14/rentcrl-domain-driven-design-minimal-api","source":"@site/blog/2025-04-14-rentcrl-domain-driven-design-minimal-api.md","title":"rentcrl-domain-driven-design-minimal-api","description":"Suite du d\xe9veloppement de RentCRL : l\u2019application qui permet aux propri\xe9taires d\u2019envoyer automatiquement les quittances de loyer \xe0 leurs locataires. Apr\xe8s avoir travaill\xe9 sur le frontend en React et l\u2019int\xe9gration d\u2019Auth0 pour l\u2019authentification, je me suis attaqu\xe9 au backend. Je vous partage ici mes choix techniques et leur motivation.","date":"2025-04-14T00:00:00.000Z","tags":[],"readingTime":3.79,"hasTruncateMarker":true,"authors":[{"name":"Micka\xebl C\xe9raline","title":"D\xe9veloppeur Full Stack","url":"https://github.com/mickaelcrl","key":"mickael","page":null}],"frontMatter":{"title":"rentcrl-domain-driven-design-minimal-api","authors":"mickael","date":"2025-04-14T00:00:00.000Z"},"unlisted":false,"prevItem":{"title":"D\xe9ployer une application React + ASP.NET Core + Cosmos DB sur Azure : gestion des environnements et des secrets","permalink":"/blog/2025/05/16/deployer-une-application-react-asp-net-core-cosmosdb-azure"},"nextItem":{"title":"Architecture de RentCRL","permalink":"/blog/2024/03/07/architecture-rentcrl"}},"content":"Suite du d\xe9veloppement de RentCRL : l\u2019application qui permet aux propri\xe9taires d\u2019envoyer automatiquement les quittances de loyer \xe0 leurs locataires. Apr\xe8s avoir travaill\xe9 sur le frontend en React et l\u2019int\xe9gration d\u2019Auth0 pour l\u2019authentification, je me suis attaqu\xe9 au backend. Je vous partage ici mes choix techniques et leur motivation.\\n\\nPour faire simple, nous parlerons de clean architecture, DDD, minimal API, du pattern Result et de FluentValidation.\\n\\n\x3c!-- truncate --\x3e\\n\\n### Pourquoi Clean Architecture et Domain Driven Design ?\\n\\nJ\u2019ai choisi de structurer mon backend en suivant les principes de la **Clean Architecture** et du **Domain Driven Design** car ceux-ci sont populaires dans l\u2019industrie et j\u2019avais tout simplement envie de me les approprier et de les d\xe9couvrir.\\n\\nCe n\u2019est pas forc\xe9ment simple au d\xe9but, mais \xe7a force \xe0 bien s\xe9parer les responsabilit\xe9s :\\n\\n- le domaine contient la logique m\xe9tier\\n- l\u2019application s\u2019occupe de l\u2019orchestration\\n- l\u2019infrastructure g\xe8re l\u2019acc\xe8s aux donn\xe9es\\n- la pr\xe9sentation re\xe7oit les requ\xeates\\n\\nVoici l\u2019arborescence de la solution :\\n\\n![image.png](../static/img/image.png)\\n\\n### Pourquoi j\u2019ai utilis\xe9 Minimal API ?\\n\\nAlors j\u2019ai choisi d\u2019utiliser Minimal API car pendant longtemps il fallait utiliser des contr\xf4leurs mais depuis environ 2 ans .Net a sorti minimal API donc je me suis int\xe9ress\xe9 a ce que c\u2019est.\\n\\nDe plus, je suis tomb\xe9 sur une vid\xe9o de Nick Chapsas qui compare minimal API avec MVC \xe0 travers une discussion sur le sujet et ce que j\u2019en retiens est que minimal API est plus rapide, plus moderne avec moins de boilerplate et donc \xe7a m\u2019a encourag\xe9 dans mon envie de partir dessus.\\n\\n[https://www.youtube.com/watch?v=bpVN_plQm5E](https://www.youtube.com/watch?v=bpVN_plQm5E)\\n\\n### Pourquoi j\'utilise Result&lt;T&gt; au lieu d\u2019Exceptions ?\\n\\nJ\u2019ai r\xe9cemment regard\xe9 la vid\xe9o de Milan Jovanovic qui introduit le pattern Result :\\n\\n[https://www.youtube.com/watch?v=WCCkEe_Hy2Y&t=612s](https://www.youtube.com/watch?v=WCCkEe_Hy2Y&t=612s)\\n\\nIl explique que les exceptions peuvent \xeatre co\xfbteuses en performance. Alors, il propose un pattern int\xe9ressant pour g\xe9rer les erreurs \u201cattendues\u201d comme par exemple les erreurs de validation.\\n\\nEt ainsi, on envoie des exceptions que pour les erreurs qui th\xe9oriquement ne devraient jamais arriver comment par exemple au moment de la cr\xe9ation d\u2019un Owner avec un param\xe8tre non valide.\\nErreur attendue :\\n\\n```csharp\\n\\npublic async Task<Result<Owner>> CreateOwnerAsync(string auth0Id, string firstName, string lastName, string email, string phoneNumber)\\n{\\n    var response = _ownerRepository.GetByEmailAsync(email);\\n    if (response.Result != null)\\n        return Result.Failure<Owner>(UserErrors.EmailAlreadyExists);\\n\\n    var newOwner = new Owner(auth0Id, firstName, lastName, email, phoneNumber);\\n    return await _ownerRepository.AddAsync(newOwner);\\n}\\n```\\n\\nErreur qui ne devrait pas se produire car on est d\xe9j\xe0 pass\xe9 par toutes les couches pr\xe9c\xe9dentes (y compris la validation avec FluentValidation) :\\n\\n```csharp\\npublic Owner(string auth0Id, string firstName, string lastName, string email, string phoneNumber)\\n{\\n    if (string.IsNullOrEmpty(auth0Id))\\n        throw new ArgumentException(\\"Auth0Id cannot be null.\\", nameof(auth0Id));\\n\\n    if (string.IsNullOrEmpty(firstName))\\n        throw new ArgumentException(\\"Firstname cannot be null.\\", nameof(firstName));\\n\\n    if (string.IsNullOrEmpty(lastName))\\n        throw new ArgumentException(\\"LastName cannot be null.\\", nameof(lastName));\\n\\n    if (!Regexes.Email.IsMatch(email))\\n        throw new ArgumentException(\\"Email is not valid.\\", nameof(email));\\n\\n    if (!Regexes.PhoneNumber.IsMatch(phoneNumber))\\n        throw new ArgumentException(\\"PhoneNumber is not valid.\\", nameof(phoneNumber));\\n\\n    Id = Guid.NewGuid();\\n    Auth0Id = auth0Id;\\n    FirstName = firstName;\\n    LastName = lastName;\\n    Email = email;\\n    PhoneNumber = phoneNumber;\\n}\\n```\\n\\n### Et FluentValidation dans tout \xe7a ?\\n\\nJe valide les entr\xe9es utilisateur d\xe8s la couche d\u2019exposition, avec **FluentValidation**. C\u2019est simple \xe0 brancher, puissant, et me permet de retourner des erreurs claires c\xf4t\xe9 frontend sans m\xealer la validation \xe0 la logique m\xe9tier. La couche domaine reste concentr\xe9e sur les r\xe8gles m\xe9tier, pendant que la validation des entr\xe9es est g\xe9r\xe9e directement dans la couche de pr\xe9sentation. \xc7a m\'\xe9vite d\u2019avoir des if/else ou des exceptions partout, et je peux centraliser les r\xe8gles de validation dans des classes d\xe9di\xe9es.\\n\\nJ\u2019ai d\xe9couvert FluentValidation gr\xe2ce \xe0 mon fr\xe8re, mais aussi via cette vid\xe9o de Milan Jovanovic qui en fait une bonne d\xe9mo :\\n\\n[https://www.youtube.com/watch?v=vaDDB7BpEgQ](https://www.youtube.com/watch?v=vaDDB7BpEgQ)\\n\\nC\u2019est ce qui m\u2019a convaincu de l\u2019adopter ici.\\n\\n```csharp\\npublic class OwnerModelValidator : AbstractValidator<OwnerModel>\\n{\\n    public OwnerModelValidator()\\n    {\\n        RuleFor(o => o.Auth0Id).NotEmpty();\\n        RuleFor(o => o.FirstName).NotEmpty();\\n        RuleFor(o => o.LastName).NotEmpty();\\n        RuleFor(o => o.Email).NotEmpty().Matches(Regexes.Email);\\n        RuleFor(o => o.PhoneNumber).NotEmpty().Matches(Regexes.PhoneNumber);\\n    }\\n}\\n```\\n\\n```csharp\\npublic static class OwnerEndpoint\\n{\\n    public const string PostOwnerRoute = \\"/owners\\";\\n\\n    public static void MapOwnerEndpoint(this IEndpointRouteBuilder app)\\n    {\\n        app.MapPost(PostOwnerRoute, CreateOwner)\\n        .RequireAuthorization()\\n        .WithName(\\"Owners\\");\\n    }\\n\\n    internal static async Task<IResult> CreateOwner([FromBody] OwnerModel ownerModel, IOwnerService ownerService, IValidator<OwnerModel> validator)\\n    {\\n        var validationResult = validator.Validate(ownerModel);\\n        if (!validationResult.IsValid)\\n            return Results.ValidationProblem(validationResult.ToDictionary());\\n\\n        var result = await ownerService.CreateOwnerAsync(\\n            ownerModel.Auth0Id,\\n            ownerModel.FirstName,\\n            ownerModel.LastName,\\n            ownerModel.Email,\\n            ownerModel.PhoneNumber\\n        );\\n\\n        if (result.IsSuccess)\\n        {\\n            var newOwner = result.Value.ToModel();\\n            return Results.Ok(newOwner);\\n        }\\n\\n        if (result.Error == UserErrors.EmailAlreadyExists)\\n            return Results.Conflict();\\n\\n        return Results.Problem(statusCode: StatusCodes.Status500InternalServerError);\\n    }\\n}\\n```\\n\\n### Le r\xe9sultat ?\\n\\nAu final, je pense avoir un backend propre. C\u2019est-\xe0-dire testable et facile \xe0 maintenir pour ajouter les autres fonctionnalit\xe9s par la suite et pr\xeat \xe0 \xeatre d\xe9ploy\xe9 sur Azure. En tout cas, cela reste mon point de vue de d\xe9veloppeur avec 2 ans d\u2019exp\xe9rience.\\n\\n\ud83d\udcc1 Code source ici : [github.com/MickaelCRL/RentCRL](https://github.com/MickaelCRL/RentCRL)"},{"id":"/2024/03/07/architecture-rentcrl","metadata":{"permalink":"/blog/2024/03/07/architecture-rentcrl","source":"@site/blog/2024-03-07-architecture-rentcrl.md","title":"Architecture de RentCRL","description":"1 - Introduction","date":"2024-03-07T00:00:00.000Z","tags":[],"readingTime":1.55,"hasTruncateMarker":true,"authors":[{"name":"Micka\xebl C\xe9raline","title":"D\xe9veloppeur Full Stack","url":"https://github.com/mickaelcrl","key":"mickael","page":null}],"frontMatter":{"title":"Architecture de RentCRL","authors":"mickael","date":"2024-03-07T00:00:00.000Z"},"unlisted":false,"prevItem":{"title":"rentcrl-domain-driven-design-minimal-api","permalink":"/blog/2025/04/14/rentcrl-domain-driven-design-minimal-api"},"nextItem":{"title":"Pr\xe9sentation de RentCRL","permalink":"/blog/2023/09/30/presentation-rentcrl"}},"content":"\x3c!-- # 02 - Architecture de RentCRL --\x3e\\r\\n\\r\\n## 1 - Introduction\\r\\n\\r\\n<head>\\r\\n  <meta name=\\"og:title\\" content=\\"Architecture RentCRL\\"/>\\r\\n  <meta name=\\"og:image\\" content=\\"/static/img/architecture-Infrastructure.png\\"/>\\r\\n  <meta name=\\"twitter:image\\" content=\\"/static/img/architecture-Infrastructure.png\\"/>\\r\\n</head>\\r\\n\\r\\nDans cet article, je vais vous pr\xe9senter l\'architecture de RentCRL, visant \xe0 simplifier la gestion locative en automatisant les t\xe2ches telles que la collecte des loyers et la g\xe9n\xe9ration des quittances pour les propri\xe9taires.\\r\\n\\r\\n## 2 - Choix Conceptuels\\r\\n\\r\\nPour ce projet de taille modeste, j\'ai choisi de r\xe9aliser uniquement 3 diagrammes dans ma partie conception pour m\'aider \xe0 le concr\xe9tiser.\\r\\n\\r\\n\x3c!-- truncate --\x3e\\r\\n\\r\\nLes voici :\\r\\n\\r\\n### Diagramme de cas d\'utilisation\\r\\n\\r\\n<a href=\\"/img/architecture-Use-case.jpg\\" target=\\"_blank\\">\\r\\n<img src=\\"/img/architecture-Use-case.jpg\\" alt=\\"architecture-Use-case\\"/>\\r\\n</a>\\r\\nLe diagramme de cas d\'utilisation de RentCRL illustre les interactions entre les utilisateurs et le syst\xe8me. Les acteurs, tels que les propri\xe9taires, les locataires et les collaborateurs, interagissent avec diff\xe9rentes fonctionnalit\xe9s de l\'application.\\r\\n\\r\\n### Diagramme de classe\\r\\n\\r\\n<a href=\\"/img/architecture-Class-Diagram.jpg\\" target=\\"_blank\\">\\r\\n<img src=\\"/img/architecture-Class-Diagram.jpg\\" alt=\\"architecture-Class-Diagram\\"/>\\r\\n</a>\\r\\nLe diagramme de classe de RentCRL mod\xe9lise la structure des entit\xe9s principales et leurs relations.\\r\\n\\r\\n### Diagramme d\'infrastructure\\r\\n\\r\\n<a href=\\"/img/architecture-Infrastructure.jpg\\" target=\\"_blank\\">\\r\\n<img src=\\"/img/architecture-Infrastructure.jpg\\" alt=\\"architecture-Infrastructure\\"/>\\r\\n</a>\\r\\n\\r\\nL\'infrastructure de RentCRL se compose de quatre \xe9l\xe9ments cl\xe9s :\\r\\n\\r\\n- Web : L\'application web contenant les fichiers JavaScript, HTML, CSS.\\r\\n- Backend : L\'application backend renfermant les fichiers C# / .Net et responsable du fonctionnement logique du syst\xe8me.\\r\\n- DataBase \'CosmosDB\' : Le stockage s\xe9curis\xe9 des donn\xe9es n\xe9cessaires au bon fonctionnement de RentCRL.\\r\\n- Auth0 : L\'authentification et la gestion des mots de passe des utilisateurs.\\r\\n\\r\\nJ\'ai choisi ces trois diagrammes sp\xe9cifiques pour leur pertinence m\xeame dans le cadre d\'un projet modeste comme RentCRL. Ensemble, ils fournissent une perspective exhaustive des interactions utilisateur, de la structure des donn\xe9es et de l\'infrastructure technique n\xe9cessaires pour le d\xe9veloppement du syst\xe8me.\\r\\n\\r\\n## 3 - CONCLUSION\\r\\n\\r\\nCes diagrammes constituent une base pour m\'aider \xe0 la r\xe9alisation concr\xe8te de RentCRL. Dans le prochain article, je commencerai \xe0 montrer comment cr\xe9er la solution."},{"id":"/2023/09/30/presentation-rentcrl","metadata":{"permalink":"/blog/2023/09/30/presentation-rentcrl","source":"@site/blog/2023-09-30-presentation-rentcrl.md","title":"Pr\xe9sentation de RentCRL","description":"1 - Objectif","date":"2023-09-30T00:00:00.000Z","tags":[],"readingTime":1.255,"hasTruncateMarker":true,"authors":[{"name":"Micka\xebl C\xe9raline","title":"D\xe9veloppeur Full Stack","url":"https://github.com/mickaelcrl","key":"mickael","page":null}],"frontMatter":{"title":"Pr\xe9sentation de RentCRL","authors":"mickael","date":"2023-09-30T00:00:00.000Z"},"unlisted":false,"prevItem":{"title":"Architecture de RentCRL","permalink":"/blog/2024/03/07/architecture-rentcrl"}},"content":"\x3c!-- # 01 - Pr\xe9sentation de RentCRL --\x3e\\r\\n\\r\\n## 1 - Objectif\\r\\n\\r\\n<head>\\r\\n  <meta name=\\"og:title\\" content=\\"Pr\xe9sentation RentCRL\\"/>\\r\\n  <meta name=\\"og:image\\" content=\\"/static/img/logo_RentCRL.png\\"/>\\r\\n  <meta name=\\"twitter:image\\" content=\\"/static/img/logo_RentCRL.png\\"/>\\r\\n</head>\\r\\n\\r\\nJe suis heureux de vous pr\xe9senter mon nouveau projet, RentCRL. Dans les prochains jours, je travaillerai activement sur ce projet et partagerai avec vous les d\xe9tails de son d\xe9veloppement \xe0 travers une s\xe9rie d\'articles.\\r\\n\\r\\nRentCRL vise \xe0 simplifier la gestion des biens immobiliers pour les propri\xe9taires. Il s\'agit d\'une application web qui permettra aux propri\xe9taires de pr\xe9lever les loyers de leurs locataires et d\'envoyer les quittances de mani\xe8re enti\xe8rement automatis\xe9e.\\r\\n\\r\\n\x3c!-- truncate --\x3e\\r\\n\\r\\n## 2 - Inspiration\\r\\n\\r\\nL\'id\xe9e derri\xe8re RentCRL d\xe9coule d\'une exp\xe9rience personnelle au sein de notre entreprise familiale sp\xe9cialis\xe9e dans l\'immobilier. Nous avons constat\xe9 la n\xe9cessit\xe9 de simplifier le processus de gestion des loyers et des quittances, actuellement g\xe9r\xe9 manuellement avec l\'aide de l\'outil Rentila.\\r\\n\\r\\nMes motivations pour ce projet sont doubles :\\r\\n\\r\\n<ol>\\r\\n  <li>Simplifier et automatiser une t\xe2che fastidieuse tout en mettant en pratique mes comp\xe9tences en d\xe9veloppement web.</li>\\r\\n  <li>Accro\xeetre ma visibilit\xe9 en tant que d\xe9veloppeur web pour d\xe9crocher des contrats de d\xe9veloppement int\xe9ressants.</li>\\r\\n</ol>\\r\\n\\r\\n## 3 - M\xe9thodologie\\r\\n\\r\\nLe d\xe9veloppement de RentCRL fera appel aux technologies suivantes :\\r\\n\\r\\n<ul>\\r\\n  <li>\\r\\n    Front-end :\\r\\n    <ul>\\r\\n      <li>JavaScript</li>\\r\\n      <li>HTML5</li>\\r\\n      <li>Angular</li>\\r\\n      <li>CSS3</li>\\r\\n    </ul>\\r\\n  </li>\\r\\n  <li>\\r\\n    Back-end :\\r\\n    <ul>\\r\\n      <li>C# / .NET</li>\\r\\n    </ul>\\r\\n  </li>\\r\\n  <li>\\r\\n    Base de donn\xe9es :\\r\\n    <ul>\\r\\n      <li>Azure CosmosDB</li>\\r\\n    </ul>\\r\\n  </li>\\r\\n</ul>\\r\\n\\r\\n## 4 - \xc0 venir\\r\\n\\r\\nJe commencerai par la phase de planification et de conception. Prochainement, je vous pr\xe9senterai en d\xe9tail l\'architecture de RentCRL."}]}}')}}]);